# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: TapIn CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  flutter-tests:
    name: Run Flutter tests and analyze
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: flutter_frontend

    steps:
      - uses: actions/checkout@v4

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get

      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      - name: Format Dart code
        run: dart format .

      # - name: Commit and push any formatting changes
      #   run: |
      #     git config --global user.name "github-actions[bot]"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git add .
      #     git diff --cached --quiet || git commit -m "ci: apply dart format"
      #     git push origin HEAD:${{ github.head_ref || github.ref_name }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # # Consider passing '--fatal-infos' for slightly stricter analysis.
      # - name: Analyze project source
      #   run: flutter analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run Flutter tests
        run: flutter test

  firebase-deploy:
    name: Deploy Firebase Functions
    needs: flutter-tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: firebase_backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: firebase_backend/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install dependencies
        run: npm install

      - name: Deploy to Firebase
        run: firebase deploy --only functions
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
